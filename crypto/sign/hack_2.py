# coding: utf-8
from Crypto.Util.number import *
from pwn import *
import gmpy2
import re

def red(prt):
    return "\033[91m{}\033[00m".format(prt)
def grn(prt):
    return "\033[92m{}\033[00m".format(prt)
def cyn(prt):
    return "\033[96m{}\033[00m".format(prt)
def flag(stuff):
    inner = re.search(r"\{.+\}", stuff).group()
    return  stuff.replace('UDCTF', cyn('UDCTF')).replace(inner.strip('{}'), red(inner.strip('{}'))).replace('{', grn('{')).replace('}', grn('}'))

def fermat(N):
    x = gmpy2.ceil(gmpy2.sqrt(N))
    y = x**2 - N
    while not gmpy2.sqrt(y).is_integer():
        x += 1
        y = x**2 - N
    return x + gmpy2.sqrt(y), x - gmpy2.sqrt(y)

# with open('rsa_values') as f:
#     values = [l.strip() for l in f]

# for val in values:
#     print val
#     exec(val)

ct = 166164018629701172622116674009560734238347920784833188287193597902773726510946151755204672743739144655663679479543380952673856440451813941043968649550224288822952980604063842269300068908374559014872742798750488191650798042832423226837564686437922585152871318148054296244436007874455295650741407611268725961281084258029711662491055603466010581907149478958260032004205937470540861459597723275424911363415773056379506219162926547242993734860767211395935403743410835612305608361857859647956462932713019333771045087013052186138138206105703664672375170446584416175272790424388733767231957854597180466278060325429166289655990
n = 290666259387532346237535530508452628473844940924603295128753127934040464793478325187446725411866659613754667755062022886414519002913925175942136042857056833642299185984057166719519197121082470530157252087901737357741953906023772064552541421989624242008793371281216343298496981387627529488039377556915533263509469085282830092052600726959493498160173748413226502416479387289878110460138215225044921153531736397631818767723274631025569249279331587605861240885700574892097670942967670334495229443941866819232552635120788726426177707016402543250274427230073130640065286264457617612110390901729832256026839480497523895157310
e = 65537


p, q = fermat(n)
phi = (p-1)*(q-1)
d = gmpy2.invert(gmpy2.mpz(e), gmpy2.mpz(phi))
print long_to_bytes(gmpy2.powmod(ct, d, gmpy2.mpz(p*q)))
print long_to_bytes(gmpy2.powmod(long(ct), gmpy2.invert(long(e), long(phi)), long(n)))

# check if N is prime
# if not isPrime(N):
    
