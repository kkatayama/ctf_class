# coding: utf-8
from pwnbox import *


ct=16616401862970117262211667400956073423834792078483318828719359790277372651094615175520467274373914465566367947954338095267385644045181394104396864955022428882295298060406384226930006890837455901487274279875048819165079804283242322683756468643792258515287131814805429624443600787445529565074140761126872596128108425802971166249105560346601058190714947895826003200420593747054086145959772327542491136341577305637950621916292654724299373486076721139593540374341083561230560836185785964795646293271301933377104508701305218613813820610570366467237517044658441617527279042438873376723195785459718046627806032542916628965599
n=29066625938753234623753553050845262847384494092460329512875312793404046479347832518744672541186665961375466775506202288641451900291392517594213604285705683364229918598405716671951919712108247053015725208790173735774195390602377206455254142198962424200879337128121634329849698138762752948803937755691553326350946908528283009205260072695949349816017374841322650241647938728987811046013821522504492115353173639763181876772327463102556924927933158760586124088570057489209767094296767033449522944394186681923255263512078872642617770701640254325027442723007313064006528626445761761211039090172983225602683948049752389515731
e=65537
'''
ct= 654564125967811572957608485461509223541781197895608920296825435452302563551217882689453762450350456257099687251554693360645992257362168460115089842875072530869254099617858153458510730488327127628978127748004507636893613507344065845140647694349616219705757465949239924311260160127009283418952554522720051840260714703523494071411559772701875928237248989122625648657235677768486515417771976078417365256201505968603934443986411140514722785883888625061210731765750448
N = 1209143407476550975641959824312993703149920344437422193042293131572745298662696284279928622412441255652391493241414170537319784298367821654726781089600780498369402167443363862621886943970468819656731959468058528787895569936536904387979815183897568006750131879851263753496120098205966442010445601534305483783759226510120860633770814540166419495817666312474484061885435295870436055727722073738662516644186716532891328742452198364825809508602208516407566578212780807
e = 65537
'''
for A in range(1, 101):
    for B in range(A + 1, 101):
        ### Try Fermat Factoring ###
        p_, q_ = number.fermat_factoring(n)
        
        p = number.gmpy2.gcd(N, number.gmpy2.mpz(p_) * A)
        q = number.gmpy2.gcd(N, number.gmpy2.mpz(q_) * B)
        
        if (p != 1 and q != 1):  # Valid Weak Primes #
            d = number.gmpy2.invert(e, (p-1)*(q-1))
            pt = number.gmpy2.powmod(ct, d, N)
            # pt_hex = '{:x}'.format(pt))
            print(bytes.fromhex(hex(pt)[2:]).decode('utf-8'))
            break
    else:
        continue
    break
    
