# coding: utf-8
from Crypto.Util.number import long_to_bytes
import gmpy2
import re

def red(prt):
    return "\033[91m{}\033[00m".format(prt)
def grn(prt):
    return "\033[92m{}\033[00m".format(prt)
def cyn(prt):
    return "\033[96m{}\033[00m".format(prt)
def flag(stuff):
    inner = re.search(r"\{.+\}", stuff).group()
    return  stuff.replace('UDCTF', cyn('UDCTF')).replace(inner.strip('{}'), red(inner.strip('{}'))).replace('{', grn('{')).replace('}', grn('}'))

e= 17
c= 3198848265669835399279038697158214085985885843295655568149120891560680579991810753484832276924307333123354790809589044244900698311657038873091804448734373374553740122184428811605730361541624360131287565797398663800232023127012981341090515951386899906660264723528640732185400939123115625654824815774653029128156086734799382491421630427772561076313620854086824002734965260535225137409039013676535575998422263494037272666051535915415895342564539031943083828173934462378583823722236126834362690536719344760049336172602509331921957653572285277454644049453461556699605021066410142068774125304456903409122248280477241632681116592917571874391303143421857327405296935077120110036869887186375374523977945412635829947134085893031014723399041942922805673790245193318540024319408894956282758650203807128730214171372101233573168375567365218619267260898975199256546655478534007217445161345322123503860540339931612146572722378624374090618951046341821
N = 726299205410645187733070423463291257347700994901345586981336281007906161999141802075707876671983017938628762179896438219439976710285236648933518487281361143987721966495574007102599710491203030671397044031205036697657669725200695385262598676403402952440110022124946858427026120166263708611465009720467912409495476569761557244955229699419639494047048865103572208607631309438331709504846932400946485584327415244648781542634826612709104364314925632768395487342603606941066842183364761036652022091211087788236767079808663733722790741265084319499084216494846403163295244379745748997350773635099369314780050808053821725852963977876920022095146190567493817005603732497661179309355162502497437664468015383560256020529693833041810762991330822006859408514553548387660124218198896174117598419512470789202040512371275600047690410887914211731694267108520600382421633795471245888991782248412112346597391015775774729945714142790532096286339495804328014417129530485819115458958199894606235150077540944624798051895909755925792727676700053645997646357090596850942449765600849817420297292222746411411544400367953949822508200608844875338132010955197496252448244222882171323546601318743203369306610464757230605797163261794001019749012869828842784016814929

def fermat(n):
    x = gmpy2.ceil(gmpy2.sqrt(n))
    y = x**2 - n
    while not gmpy2.sqrt(y).is_integer():
        x += 1
        y = x**2 - n
    return x + gmpy2.sqrt(y), x - gmpy2.sqrt(y)
p, q = fermat(N)
phi = (p-1)*(q-1)
d = gmpy2.invert(e, long(phi))
temp = long_to_bytes(gmpy2.powmod(c, long(d), long(p*q)))

left = temp.split('UDCTF')[0]
right = temp.split('UDCTF')[1]

print left
print flag('UDCTF' + right)

with open('flag.txt', 'w') as f:
    f.write(flag(temp))
